// Map Reduce Protos
syntax = "proto3";
package io.reverie.mapreduce;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

service Master {
  // Service discovery
  rpc RegisterWorker(RegisterWorkerRequest) returns (RegisterWorkerResponse) {}

  // Heartbeats
  rpc SendHeartbeat(SendHeartbeatRequest) returns (SendHeartbeatResponse) {}

  // Task management
  rpc GetTask(GetTaskRequest) returns (GetTaskResponse) {}
  rpc ReportTaskCompletion(ReportTaskCompletionRequest) returns (ReportTaskCompletionResponse) {}

  // Debug
  rpc Debug(DebugRequest) returns (DebugResponse) {}
}

// Service discovery
message RegisterWorkerRequest {
  repeated uint32 locally_stored_chunks = 1;
}

message RegisterWorkerResponse {}

// Heartbeats
message SendHeartbeatRequest {}
message SendHeartbeatResponse {}

// Task management
message GetTaskRequest {}
message GetTaskResponse {
  // Response indicates that worker should shut down and exit.
  message Shutdown {
    message Done {}
    message Error {
      string message = 1;
    }

    oneof reason {
      Done done = 1;
      Error error = 2;
    }
  }

  // Response indicates that worker should ask again after specified duration.
  message Backoff {
    google.protobuf.Duration duration = 1;
  }

  // Response indicates that worker should start a new task.
  message Task {
    message Map {}

    message Reduce {}

    oneof task {
      Map map = 1;
      Reduce reduce = 2;
    }
  }

  oneof instruction {
    Shutdown shutdown = 1;
    Backoff backoff = 2;
    Task task = 3;
  }
}

message ReportTaskCompletionRequest {}
message ReportTaskCompletionResponse {}



message DebugRequest {}
message DebugResponse {
  message Worker {
    string address = 1;
    google.protobuf.Timestamp last_heartbeat = 2;
    repeated uint32 locally_stored_chunks = 3;
  }

  message AwaitingWorkers {
    map<string, Worker> workers = 1;
  }

  oneof state {
    AwaitingWorkers awaiting_workers = 1;
  }
}